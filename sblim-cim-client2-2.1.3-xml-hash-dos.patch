diff -up sblim-cim-client2-2.1.3-src/src/org/sblim/cimclient/internal/cimxml/sax/NodeFactory.java.orig sblim-cim-client2-2.1.3-src/src/org/sblim/cimclient/internal/cimxml/sax/NodeFactory.java
--- sblim-cim-client2-2.1.3-src/src/org/sblim/cimclient/internal/cimxml/sax/NodeFactory.java.orig	2012-04-23 11:54:30.283190611 +0200
+++ sblim-cim-client2-2.1.3-src/src/org/sblim/cimclient/internal/cimxml/sax/NodeFactory.java	2012-04-23 11:59:09.591764301 +0200
@@ -22,6 +22,7 @@
 package org.sblim.cimclient.internal.cimxml.sax;
 
 import java.util.HashMap;
+import java.util.Random;
 
 import org.sblim.cimclient.internal.cimxml.sax.node.*;
 
@@ -54,7 +55,7 @@ public class NodeFactory implements Node
 	 *         equals comparisons (==).
 	 */
 	public static String getEnum(String pNodeName) {
-		return NODENAME_HASH.get(pNodeName);
+		return NODENAME_HASH.get(pNodeName + iRandomString);
 	}
 
 	private static HashMap<String, FactoryEntry> cParserMap;
@@ -440,9 +441,25 @@ public class NodeFactory implements Node
 
 	private static final HashMap<String, String> NODENAME_HASH = new HashMap<String, String>();
 
+	private static String iRandomString;
+
 	private static void initNodeNameHash(String[] pEnumA) {
+		// Append 8-byte randomly-generated string to keys in HashMap to avert
+		// hash DoS
+		Random generator = new Random(System.currentTimeMillis());
+		byte randomByte[] = new byte[1];
+		StringBuilder randomString = new StringBuilder();
+		while (randomString.length() < 8) {
+			generator.nextBytes(randomByte);
+			if (randomByte[0] > 0) {
+				char ch = (char) randomByte[0];
+				if (!Character.isISOControl(ch)) randomString.append(ch);
+			}
+		}
+		iRandomString = randomString.toString();
+
 		for (int i = 0; i < pEnumA.length; i++)
-			NODENAME_HASH.put(pEnumA[i], pEnumA[i]);
+			NODENAME_HASH.put(pEnumA[i] + iRandomString, pEnumA[i]);
 	}
 
 	static {
